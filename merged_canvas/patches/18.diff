diff --git a/modules/canvas_ai/canvas_ai.links.menu.yml b/modules/canvas_ai/canvas_ai.links.menu.yml
index 3f77b376c9d665bc9f43b0add2db14e7a4de2e7e..82f45338a17c6620e6221ac8c3fa5aa2b3971fb9 100644
--- a/modules/canvas_ai/canvas_ai.links.menu.yml
+++ b/modules/canvas_ai/canvas_ai.links.menu.yml
@@ -9,3 +9,7 @@ canvas_ai.setting:
   description: 'Set the max image upload size.'
   parent: ai.admin_settings
   route_name: canvas_ai.setting
+canvas_ai.theme_region_settings:
+  title: Canvas AI Theme Region Settings
+  parent: ai.admin_settings
+  route_name: canvas_ai.theme_region_settings
diff --git a/modules/canvas_ai/canvas_ai.routing.yml b/modules/canvas_ai/canvas_ai.routing.yml
index 712c0178b3cb80263292bea01c6e91c816acb7f1..49ecd493834fadfd955e0f8e1ba85dc09da03e6c 100644
--- a/modules/canvas_ai/canvas_ai.routing.yml
+++ b/modules/canvas_ai/canvas_ai.routing.yml
@@ -14,7 +14,7 @@ canvas_ai.csrf_token:
     _method: 'POST'

 canvas_ai.component_description_settings:
-  path: '/admin/config/system/canvas-ai-component-description-settings'
+  path: '/admin/config/ai/canvas-ai-component-description-settings'
   defaults:
     _title: 'Canvas AI Component Description Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiComponentDescriptionSettingsForm'
@@ -26,5 +26,11 @@ canvas_ai.setting:
   defaults:
     _title: 'Canvas AI Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiSettingsForm'
+
+canvas_ai.theme_region_settings:
+  path: '/admin/config/ai/canvas-ai-theme-region-settings'
+  defaults:
+    _title: 'Canvas AI Theme Region Settings'
+    _form: 'Drupal\canvas_ai\Form\CanvasAIThemeRegionSettingsForm'
   requirements:
     _permission: 'use Drupal Canvas ai'
diff --git a/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_ai_orchestrator.yml b/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_ai_orchestrator.yml
index 5276d63767ebee12bcf3aee055ba550afeeedaff..1d325b34c551da2c8ba2027fa3538ad445e4582a 100644
--- a/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_ai_orchestrator.yml
+++ b/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_ai_orchestrator.yml
@@ -65,7 +65,7 @@ system_prompt: |-
         - You MUST IGNORE all component context, variables, and history for this instruction.
         - Even if context includes an active or selected component, or previous steps were component creation/selection, only process the new page request.
         - You are STRICTLY FORBIDDEN from mentioning, referencing, or basing any action on prior components or their selection for this type of request.
-    - If the user's request instructs to "create", "add" or "generate" a **page** (e.g., includes phrases like "create a page", "build a landing page", "add a new page", "design a homepage", etc.), **always delegate to `canvas_page_builder_agent`**, regardless of any parameters, context, or previous agent usage.
+    - Use `canvas_template_builder_agent` only for template, header, or footer generation. Pass the user request unchanged. For other page-building requests, use `canvas_page_builder_agent`.
     - If the request specifically directs creation or editing of a **component** (e.g., "create a [code] component", "update this component", "add a new button component", etc.), delegate to `canvas_component_agent`.
     - Otherwise, if the `selected_component` parameter exists in the **context** and has a value, it is a **code component creation or update request**. Delegate it to the `canvas_component_agent`, even if keywords like "update title" or "change description" are present in the request.

@@ -75,7 +75,7 @@ system_prompt: |-
     - `canvas_metadata_generation_agent`: to generate or update the description or metadata.
     - `canvas_title_generation_agent`: to generate or update the title.
   - If the request is to add components or create sections for specific use cases, it is a page-building task. Delegate it to the `canvas_page_builder_agent` sub-agent.
-  - Important: When using the canvas_page_builder_agent tool, always pass the complete, unaltered user request to the tool.
+  - Important: When using the canvas_page_builder_agent or  `canvas_template_builder_agent` tool, always pass the complete, unaltered user request to the tool.
   If the request is a follow-up related to a previous interaction, you may add relevant context to help the tool understand it better.
   However, never modify, reword, or omit any part of the user's original request.
   - When in doubt about sub-agent selection, do not proceed and do not delegate. Instead, return a message indicating that the request could not be processed due to ambiguity.
@@ -113,6 +113,7 @@ tools:
   'ai_agents::ai_agent::canvas_component_agent': true
   'ai_agents::ai_agent::canvas_metadata_generation_agent': true
   'ai_agents::ai_agent::canvas_page_builder_agent': true
+  'ai_agents::ai_agent::canvas_template_builder_agent': true
   'ai_agents::ai_agent::canvas_title_generation_agent': true
 tool_settings:
   'ai_agent:get_entity_information':
@@ -123,6 +124,8 @@ tool_settings:
     return_directly: 0
   'ai_agents::ai_agent::canvas_page_builder_agent':
     return_directly: 0
+  'ai_agents::ai_agent::canvas_template_builder_agent':
+    return_directly: 0
   'ai_agents::ai_agent::canvas_title_generation_agent':
     return_directly: 0
 orchestration_agent: true
@@ -182,6 +185,15 @@ tool_usage_limits:
       action: ''
       hide_property: 0
       values: ''
+  'ai_agents::ai_agent::canvas_template_builder_agent':
+    prompt:
+      action: ''
+      hide_property: 0
+      values: ''
+    files:
+      action: ''
+      hide_property: 0
+      values: ''
   'ai_agents::ai_agent::canvas_title_generation_agent':
     prompt:
       action: ''
diff --git a/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_template_builder_agent.yml b/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_template_builder_agent.yml
new file mode 100644
index 0000000000000000000000000000000000000000..d73214eb25fc061fc01ea36353fc08232b46bd28
--- /dev/null
+++ b/modules/canvas_ai/config/install/ai_agents.ai_agent.canvas_template_builder_agent.yml
@@ -0,0 +1,180 @@
+langcode: en
+status: true
+dependencies:
+  enforced:
+    module:
+      - canvas_ai
+id: canvas_template_builder_agent
+label: 'Canvas Template Builder Agent'
+description: 'This sub-agent specializes in building templates for entire pages using available components. It can also be used to generate headers and footers for pages. Use it for all template-building requests where a complete page needs to be generated.'
+system_prompt: |-
+  You are an AI assistant specialized in creating complete web page templates by strategically placing available Components into designated regions. Your role encompasses creating page body content and optionally headers/footers when explicitly requested.
+
+  You are a looping agent meaning you can run multiple times till you get enough information to generate the required response and save the page template.
+
+  ## Core Responsibilities
+
+  ### 1. Component Placement Strategy
+  - **Primary Focus**: Place components in the 'content' region as the main page body structure
+  - **Minimum Content Requirement**: Generate minimum 5 well-structured sections for the page body
+  - **Region Restriction**: ONLY use the 'content' region for page body components unless explicitly asked by the user to use other regions
+  - **Header/Footer Generation**: Generate header and footer components ONLY when user explicitly requests to include header and footer
+  - **Standalone Header/Footer**: If the request is specifically for generating only header or only footer, generate ONLY that component without creating the complete template
+  - **Region Awareness**: When generating headers/footers, utilize respective header/footer or any similar regions if available, adapting to varying region names based on the active theme. If no dedicated regions are available, use the 'content' region.
+
+  ### 2. Component Selection and Configuration
+  - **Strict Adherence**: Only use components explicitly provided in the context
+  - **Component Type Filtering**: Never use header/footer-specific components when generating page body content
+  - **Deep Analysis**: Carefully study each component's description for:
+    - Usage guidelines and best practices
+    - Component variants, when and how to use
+    - Appropriate prop values and data types
+    - Slot component recommendations
+    - Available enum values for props
+    - Standalone vs. nested component usage patterns
+  - **Content Generation**: Create high-quality, professional, creative, production-ready content for all props
+
+  ### 3. Template Interpretation and Enhancement
+  - **Flexible Input Handling**: Work with both brief requests ("create a landing page for an IT agency") and detailed specifications
+  - **Creative Expansion**: For minimal prompts, intelligently design minimum 5 well-structured sections for page body
+  - **User Journey Focus**: Prioritize user engagement and logical content flow
+  - **Professional Standards**: Deliver production-ready templates with meaningful, contextual content
+
+  ### 4. Layout Integration
+  - **JSON Layout Processing**: Analyze provided layout information to understand available regions and their usage
+  - **Strategic Region Usage**: Make informed decisions about component placement across regions when explicitly requested
+
+  ## Template Tool Configuration
+
+  ### Tool Parameters
+  The `set_template_data` tool has two inputs:
+  1. `component_structure` - the YAML template structure
+  2. `reference_component_nodepath` - for specific footer placement scenarios
+
+  ### Reference Component Nodepath Usage
+  This parameter should be used ONLY when ALL three conditions are met:
+  1. **Request Type**: The request is specifically for generating footer components only
+  2. **Region Limitation**: The current layout has only the 'content' region available (no dedicated footer region)
+  3. **Existing Content**: The content region already contains components from previous placements
+
+  ### Implementation Logic
+  When these conditions are met:
+  - Analyze existing components in the current layout
+  - **Specifically look for components with nodepath containing exactly 2 elements** (e.g., [0, 5], [0, 7])
+  - **Identify the component with the highest second element value** among these 2-element nodepaths
+  - Use that component's nodepath as the `reference_component_nodepath`
+  - This ensures footer components are placed after the last main page body component
+
+  #### Example:
+  If existing components have nodepaths like [0, 3], [0, 5], [0, 7], [0, 7, 1], [0, 2], the reference should be `[0, 7]` since it has the highest second element value (7) among the 2-element nodepaths.
+
+  ### Default Behavior
+  In all other scenarios, leave the `reference_component_nodepath` field empty, as the default top-to-bottom placement will work correctly.
+
+  ## Content and Prop Value Guidelines
+
+  ### Prop Setting Logic
+  Follow this step-by-step logic for every prop of every component:
+
+  **1. Default Prop Formatting:**
+  - By default, set prop values in the standard `prop_name: "value"` format.
+  - Generate professional, relevant content appropriate for the template's purpose.
+  - Create meaningful, contextual text for all text-based props, including buttons and link labels.
+
+  **2. Conditional Formatting for URL/Link Props:**
+  - When a prop is for a URL (e.g., `href`, `link`), you MUST set value as 'https://example.com'.  If the user provides a specific URL, use that instead of `"https://example.com"`
+
+  **3. Strict Omission of Image Source Props (CRITICAL):**
+  - Any prop related to an image source or alternative text (e.g., `src`, `alt`, `image_source`, `image_alt`) **MUST be completely omitted** from the YAML output.
+  - DO NOT include these props at all.
+  - You MAY set image-related *styling* or *layout* props if they are defined in the component (e.g., `aspect_ratio`, `image_position`).
+
+  **4. General Prop Restrictions:**
+  - **No HTML Attributes**: Do not generate values for props that correspond to HTML attributes like `class` or `id`.
+  - **No Custom Props**: Only use the props that are explicitly defined for the component. Never invent or add new props.
+  - **No empty or NULL values**: Setting `prop_name: NULL` / `prop_name: {}` / `prop_name: ''`, is strictly forbidden. Omit such props completely.
+
+  ## Page Template Design Structure
+
+  ### Format Specification
+  Design the complete page template in YAML format following this structure:
+
+  ```yml
+  region_name:
+    - sdc_machine_name_1:
+        props:
+          prop_key_A: "value"
+          prop_key_B: true
+        slots:
+          slot_name_X:
+            - nested_sdc_machine_name_A:
+                props:
+                  # ...
+          slot_name_Y:
+            - nested_sdc_machine_name_B:
+                props:
+                  # ...
+    - sdc_machine_name_2:
+        # No props or slots
+  another_region:
+    - sdc_machine_name_3:
+        props:
+          # ...
+  ```
+  - Never add any comments in the yml.
+
+  ## OUTPUT RULES (MANDATORY)
+  - DO NOT return the YAML in your output.
+  - ALWAYS use the `set_template_data` tool to pass the YAML.
+  - The `set_template_data` tool will return a JSON structure corresponding to the YAML when the template data is successfully saved.
+  - Treat the successful JSON response from the tool as confirmation that the template has been saved correctly.
+  - If there are problems with the YAML reported by the tool, correct them and repeat the cycle until you receive the successful JSON response.
+  - AFTER receiving the successful JSON response from the tool, output a short summary message in 1-2 sentences in plain text.
+  - The summary should briefly mention the main components used and their purpose.
+  - Example output: "Created a product page template using hero section, feature cards, testimonials, pricing table, and CTA components for the main content."
+  - DO NOT add any YAML, explanation, or system messages.
+  - ONLY return the summary message.
+
+  ## Success Criteria
+
+  Your success is measured by creating templates that are:
+  - **Functionally Complete**: All components properly configured with meaningful content
+  - **User-Focused**: Designed with clear user journeys and engagement patterns
+  - **Contextually Appropriate**: Content and structure match the requested template purpose
+  - **Implementation Ready**: YAML output can be directly processed without modification
+  - **Content Rich**: Page body contains minimum 5 well-structured sections with professional content
+
+  ## Available regions
+  [canvas_ai:available_regions]
+secured_system_prompt: '[ai_agent:agent_instructions]'
+tools:
+  'canvas_ai:set_template_data': true
+tool_settings:
+  'canvas_ai:set_template_data':
+    return_directly: 0
+orchestration_agent: false
+triage_agent: false
+max_loops: 10
+default_information_tools: |
+  current_layout:
+    label: 'Current layout'
+    description: 'The current layout of the page is:'
+    tool: 'canvas_ai:get_current_layout'
+    parameters: {  }
+  available_components:
+    label: 'Available components'
+    description: 'These are the Components available to use'
+    tool: 'canvas_ai:get_component_context'
+    parameters: {  }
+tool_usage_limits:
+  'canvas_ai:set_template_data':
+    component_structure:
+      action: ''
+      hide_property: 0
+      values: ''
+    reference_component_nodepath:
+      action: ''
+      hide_property: 0
+      values: ''
+exclude_users_role: false
+masquerade_roles: {  }
diff --git a/modules/canvas_ai/config/schema/canvas_ai.schema.yml b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
index 28dd23134674ceebf5d7201bf905d0caba3ac9cc..db8a120d84fa63b27f4cfb25d60656c6cdf16d9c 100644
--- a/modules/canvas_ai/config/schema/canvas_ai.schema.yml
+++ b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
@@ -37,3 +37,15 @@ component_source_entry:
     data:
       type: text
       label: 'YAML string of components'
+
+canvas_ai.theme_region.settings:
+  type: config_object
+  label: 'Canvas AI Theme Region Settings'
+  mapping:
+    region_descriptions:
+      type: mapping
+      label: 'Region Descriptions'
+      mapping:
+        '*':
+          type: text
+          label: 'Description'
diff --git a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
index e8335ade450a7cc9cf42c01736f9ad051fa9261d..1682d7b67ae553d50dfaba1e7bbc10016d81da1d 100644
--- a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
+++ b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
@@ -485,6 +485,11 @@ class CanvasAiPageBuilderHelper {
           'type' => $prop_details['type'],
           'default' => $prop_details['default'] ?? $prop_details['examples'][0] ?? NULL,
         ];
+
+        // Mark required props.
+        if (isset($sdc_definition['props']['required']) && in_array($prop_name, $sdc_definition['props']['required'], TRUE)) {
+          $output[$source_id]['components'][$component_id]['props'][$prop_name]['required'] = TRUE;
+        }
         if (isset($prop_details['enum'])) {
           $output[$source_id]['components'][$component_id]['props'][$prop_name]['enum'] = $prop_details['enum'];
         }
@@ -567,4 +572,155 @@ class CanvasAiPageBuilderHelper {
     return 0;
   }

+  /**
+   * Gets the region indices from the current layout.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values.
+   */
+  public function getRegionIndex(string $current_layout): array {
+    $layout_array = Json::decode($current_layout);
+    $regions = [];
+
+    if (isset($layout_array['layout']) && is_array($layout_array['layout'])) {
+      foreach ($layout_array['layout'] as $region_name => $region_data) {
+        if (isset($region_data['nodePathPrefix'])) {
+          $regions[$region_name] = $region_data['nodePathPrefix'][0];
+        }
+      }
+    }
+
+    return $regions;
+  }
+
+  /**
+   * Gets the available regions from the current layout along with their descriptions, if configured.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values and descriptions.
+   */
+  public function getAvailableRegions(string $current_layout) : array {
+    $region_index_mapping = $this->getRegionIndex($current_layout);
+    $region_descriptions = $this->configFactory->get('xb_ai.theme_region.settings')->get('region_descriptions') ?? [];
+    $available_regions = [];
+    foreach ($region_index_mapping as $region_name => $region_index) {
+      $available_regions[$region_name] = [
+        'nodePathPrefix' => $region_index,
+        'description' => $region_descriptions[$region_name] ?? '',
+      ];
+    }
+    return $available_regions;
+  }
+
+  /**
+   * Processes the parsed YAML array for UI representation.
+   *
+   * This function processes the yml generated by the template generation agent
+   * and converts it into a JSON structure that can be used in the UI.
+   *
+   * @param array $parsed_array
+   *   The parsed YAML array.
+   * @param string $current_layout
+   *   The current layout of the page.
+   * @param array $reference_nodepath
+   *   The nodepath of the reference component, if any.
+   */
+  public function processTemplateYmlForUi(array $parsed_array, string $current_layout, array $reference_nodepath = []): string {
+    $result = [
+      'operations' => [
+        [
+          'operation' => 'ADD',
+          'components' => [],
+        ],
+      ],
+    ];
+    foreach ($parsed_array as $region => $components) {
+      if (!is_array($components)) {
+        continue;
+      }
+
+      // If reference nodepath is given, calculate the nodepath of other components
+      // based on it.
+      if ($reference_nodepath) {
+        $this->processComponentsBelow($components, $reference_nodepath, $result['operations'][0]['components']);
+      }
+      else {
+        $region_index_mapping = $this->getRegionIndex($current_layout);
+
+        $component_index = 0;
+
+        $region_index = $region_index_mapping[$region] ?? 0;
+
+        foreach ($components as $index => $component) {
+          $this->processComponent($component, $region_index, $index, $result['operations'][0]['components'], $component_index);
+          $component_index++;
+        }
+      }
+    }
+
+    return Json::encode($result);
+  }
+
+  /**
+   * Recursively processes a component and its slots.
+   *
+   * @param array $component
+   *   The component data.
+   * @param int $region_index
+   *   The region index.
+   * @param int $component_index
+   *   The component index in the region.
+   * @param array $components
+   *   The array to store processed components.
+   * @param int $global_index
+   *   The global component index.
+   * @param array $parent_path
+   *   The parent node path.
+   */
+  protected function processComponent(array $component, int $region_index, int $component_index, array &$components, int &$global_index, array $parent_path = []): void {
+    foreach ($component as $component_type => $component_data) {
+      $node_path = empty($parent_path) ? [$region_index, $component_index] : array_merge($parent_path, [$component_index]);
+
+      $component_structure = [
+        'id' => $component_type,
+        'nodePath' => $node_path,
+        'fieldValues' => [],
+      ];
+
+      // Process props if they exist.
+      if (isset($component_data['props'])) {
+        $component_structure['fieldValues'] = $component_data['props'];
+      }
+
+      $components[] = $component_structure;
+      $global_index++;
+
+      // Process slots if they exist.
+      if (isset($component_data['slots'])) {
+        foreach ($component_data['slots'] as $slot_name => $slot_components) {
+          if (!is_array($slot_components)) {
+            continue;
+          }
+
+          foreach ($slot_components as $slot_index => $slot_component) {
+            $this->processComponent(
+              $slot_component,
+              $region_index,
+              $slot_index,
+              $components,
+              $global_index,
+              array_merge($node_path, [array_search($slot_name, array_keys($component_data['slots']))])
+            );
+          }
+        }
+      }
+    }
+  }
+
 }
diff --git a/modules/canvas_ai/src/Controller/CanvasBuilder.php b/modules/canvas_ai/src/Controller/CanvasBuilder.php
index 136310ac364956f8fb65e3d0b913ee88c9358475..49996b9d1013491869519ff7c81b522be95f5e2a 100644
--- a/modules/canvas_ai/src/Controller/CanvasBuilder.php
+++ b/modules/canvas_ai/src/Controller/CanvasBuilder.php
@@ -20,6 +20,7 @@ use Drupal\canvas_ai\Plugin\AiFunctionCall\EditComponentJs;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\CreateFieldContent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\EditFieldContent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedComponentStructure;
+use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedTemplateData;
 use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
 use Drupal\canvas_ai\CanvasAiTempStore;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -30,12 +31,12 @@ use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\Yaml\Yaml;

 /**
- * Renders the Drupal Canvas AI calls.
+ * Renders the Experience Builder AI calls.
  */
 final class CanvasBuilder extends ControllerBase {

   /**
-   * Constructs a new CanvasBuilder object.
+   * Constructs a new XbBuilder object.
    */
   public function __construct(
     protected AiProviderPluginManager $providerService,
@@ -61,14 +62,14 @@ final class CanvasBuilder extends ControllerBase {
   }

   /**
-   * Renders the Drupal Canvas AI calls.
+   * Renders the Experience Builder AI calls.
    *
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The current request.
    */
   public function render(Request $request): JsonResponse {
     $token = $request->headers->get('X-CSRF-Token') ?? '';
-    if (!$this->csrfTokenGenerator->validate($token, 'canvas_ai.canvas_builder')) {
+    if (!$this->csrfTokenGenerator->validate($token, 'canvas_ai.xb_builder')) {
       throw new AccessDeniedHttpException('Invalid CSRF token');
     }

@@ -207,7 +208,18 @@ final class CanvasBuilder extends ControllerBase {
     $agent->setAiConfiguration([]);
     $agent->setCreateDirectly(TRUE);
     $menu_fetch_source = $this->getMenuFetchSource();
-    $agent->setTokenContexts(['entity_type' => $prompt['entity_type'], 'entity_id' => $prompt['entity_id'], 'selected_component' => $prompt['selected_component'] ?? NULL, 'layout' => $prompt['layout'] ?? NULL, 'derived_proptypes' => JSON::encode($prompt['derived_proptypes']) ?? NULL, 'page_title' => $prompt['page_title'], 'page_description' => $prompt['page_description'] ?? NULL, 'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None', 'menu_fetch_source' => $menu_fetch_source]);
+    $agent->setTokenContexts([
+      'entity_type' => $prompt['entity_type'],
+      'entity_id' => $prompt['entity_id'],
+      'selected_component' => $prompt['selected_component'] ?? NULL,
+      'layout' => $prompt['layout'] ?? NULL,
+      'derived_proptypes' => JSON::encode($prompt['derived_proptypes']) ?? NULL,
+      'available_regions' => JSON::encode($this->canvasAiPageBuilderHelper->getAvailableRegions(Json::encode($prompt['current_layout']))) ?? NULL,
+      'page_title' => $prompt['page_title'],
+      'page_description' => $prompt['page_description'] ?? NULL,
+      'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None',
+      'menu_fetch_source' => $menu_fetch_source,
+    ]);
     $solvability = $agent->determineSolvability();
     $status = FALSE;
     $message = '';
@@ -232,6 +244,7 @@ final class CanvasBuilder extends ControllerBase {
         EditFieldContent:: class => ['refined_text'],
         AddMetadata::class => ['metadata'],
         SetAIGeneratedComponentStructure::class => ['operations'],
+        SetAIGeneratedTemplateData::class => ['operations'],
       ];
       if (!empty($tools)) {
         foreach ($tools as $tool) {
@@ -239,23 +252,27 @@ final class CanvasBuilder extends ControllerBase {
             if ($tool instanceof $class) {
               // @todo Refactor this after https://www.drupal.org/i/3529313 is fixed.
               $output = $tool->getReadableOutput();
-              try {
+
+              // The SetAIGeneratedTemplateData tool returns JSON instead of
+              // YAML, to reduce parsing errors.
+              if ($tool instanceof SetAIGeneratedTemplateData) {
+                $data = Json::decode($output);
+              }
+              else {
                 $data = Yaml::parse($output);
-                foreach ($keys as $key) {
-                  if (!empty($data[$key])) {
-                    $response[$key] = $data[$key];
-                  }
-                }
               }
-              catch (\Throwable) {
-                // Do nothing, the output is not YAML parsable.
+              foreach ($keys as $key) {
+                if (!empty($data[$key])) {
+                  $response[$key] = $data[$key];
+                }
               }
+
             }
           }
           if ($tool instanceof AiAgentWrapper) {
             $response['message'] = $tool->getReadableOutput();
           }
-          if ($tool->getPluginId() === 'ai_agents::ai_agent::canvas_page_builder_agent') {
+          if (in_array($tool->getPluginId(), ['ai_agents::ai_agent::canvas_ai_template_builder_agent', 'ai_agents::ai_agent::canvas_ai_page_builder_agent'])) {
             $this->canvasAiTempStore->deleteData(CanvasAiTempStore::CURRENT_LAYOUT_KEY);
           }
         }
@@ -280,7 +297,7 @@ final class CanvasBuilder extends ControllerBase {
    *   The response object.
    */
   public function getCsrfToken(Request $request): Response {
-    return new Response($this->csrfTokenGenerator->get('canvas_ai.canvas_builder'));
+    return new Response($this->csrfTokenGenerator->get('canvas_ai.xb_builder'));
   }

   /**
diff --git a/modules/canvas_ai/src/Form/CanvasAIThemeRegionSettingsForm.php b/modules/canvas_ai/src/Form/CanvasAIThemeRegionSettingsForm.php
new file mode 100644
index 0000000000000000000000000000000000000000..e0732de4d332109e6ea8e6e42717f3e81c4b332e
--- /dev/null
+++ b/modules/canvas_ai/src/Form/CanvasAIThemeRegionSettingsForm.php
@@ -0,0 +1,120 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\canvas_ai\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\canvas\Entity\PageRegion;
+
+/**
+ * Configure Canvas AI settings for this site.
+ */
+final class CanvasAIThemeRegionSettingsForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId(): string {
+    return 'canvas_ai_theme_region_settings';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getEditableConfigNames(): array {
+    return ['canvas_ai.theme_region.settings'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state): array {
+    $config = $this->config('canvas_ai.theme_region.settings');
+    $active_regions = $this->getActiveRegions();
+    $form['#tree'] = TRUE;
+
+    if (empty($active_regions)) {
+      $form['message'] = [
+        '#type' => 'markup',
+        '#markup' => $this->t("You don't have any global regions enabled in your theme."),
+      ];
+      return $form;
+    }
+
+    $form['message'] = [
+      '#type' => 'markup',
+      '#markup' => $this->t('Use this form to give proper descriptions for all the Global regions, which will be used by AI to generate content for those regions.'),
+    ];
+
+    $descriptions = $config->get('region_descriptions') ?? [];
+
+    foreach ($active_regions as $region) {
+      $region_id = $this->getRegionId($region);
+      $form[$region_id] = [
+        '#type' => 'details',
+        '#title' => $region->label(),
+        '#open' => TRUE,
+      ];
+      $form[$region_id]['description'] = [
+        '#type' => 'textarea',
+        '#title' => $this->t('Description'),
+        '#description' => $this->t('Provide a description for what kind of content should be placed in this region.'),
+        '#default_value' => $descriptions[$region_id] ?? '',
+      ];
+    }
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state): void {
+    $active_regions = $this->getActiveRegions();
+
+    $descriptions = [];
+    foreach ($active_regions as $region) {
+      $region_id = $this->getRegionId($region);
+      $descriptions[$region_id] = $form_state->getValue([$region_id, 'description']);
+    }
+
+    $this->config('canvas_ai.theme_region.settings')
+      ->set('region_descriptions', $descriptions)
+      ->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+  /**
+   * Get active theme regions.
+   *
+   * @return array
+   *   An array of active theme regions.
+   */
+  protected function getActiveRegions(): array {
+    $regions = PageRegion::loadMultiple();
+    return array_filter($regions, fn($region) => $region->status());
+  }
+
+  /**
+   * Get region ID.
+   *
+   * @param \Drupal\canvas\Entity\PageRegion $region
+   *   The page region.
+   *
+   * @return string
+   *   The region ID.
+   */
+  protected function getRegionId(PageRegion $region): string {
+    $region_id = $region->id();
+    // Remove the theme prefix.
+    if (str_contains($region_id, '.')) {
+      $parts = explode('.', $region_id, 2);
+      return $parts[1] ?? $region_id;
+    }
+    return $region_id;
+  }
+
+}
diff --git a/modules/canvas_ai/src/Hook/CanvasAiHooks.php b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
index 1c8dbf2fe26072c03766cc90341eaf0fc4c3cdd9..20ecfea255aebf784b7b2008e7fa1f9f61d80ca8 100644
--- a/modules/canvas_ai/src/Hook/CanvasAiHooks.php
+++ b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
@@ -70,6 +70,10 @@ class CanvasAiHooks {
             'name' => $this->t('Menu Fetch Source'),
             'description' => $this->t('Returns the source for menu fetching.'),
           ],
+          'available_regions' => [
+            'name' => $this->t('Available Regions'),
+            'description' => $this->t('Returns the available regions in experience builder.'),
+          ],
         ],
       ],
     ];
@@ -120,6 +124,10 @@ class CanvasAiHooks {
           case 'menu_fetch_source':
             $replacements[$original] = !empty($data['menu_fetch_source']) ? $data['menu_fetch_source'] : NULL;
             break;
+
+          case 'available_regions':
+            $replacements[$original] = !empty($data['available_regions']) ? $data['available_regions'] : NULL;
+            break;
         }
       }
     }
diff --git a/modules/canvas_ai/src/Plugin/AiFunctionCall/SetAIGeneratedTemplateData.php b/modules/canvas_ai/src/Plugin/AiFunctionCall/SetAIGeneratedTemplateData.php
new file mode 100644
index 0000000000000000000000000000000000000000..e3ef0e6d4877ae6f58734d26186a39a4fd9b8a7c
--- /dev/null
+++ b/modules/canvas_ai/src/Plugin/AiFunctionCall/SetAIGeneratedTemplateData.php
@@ -0,0 +1,158 @@
+<?php
+
+namespace Drupal\canvas_ai\Plugin\AiFunctionCall;
+
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\ai\Attribute\FunctionCall;
+use Drupal\ai\Base\FunctionCallBase;
+use Drupal\ai\Service\FunctionCalling\ExecutableFunctionCallInterface;
+use Drupal\ai\Service\FunctionCalling\FunctionCallInterface;
+use Drupal\ai\Utility\ContextDefinitionNormalizer;
+use Drupal\ai_agents\PluginInterfaces\AiAgentContextInterface;
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\Serialization\Yaml;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\canvas_ai\AiResponseValidator;
+use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
+use Drupal\canvas_ai\CanvasAiTempStore;
+
+/**
+ * Function call plugin to set the component structure generated by AI.
+ */
+#[FunctionCall(
+  id: 'canvas_ai:set_template_data',
+  function_name: 'set_template_data',
+  name: 'Set Template Data',
+  description: 'This tool is used to add components across various regions of the page to build the desired templates, headers, or footers. The component structure must be provided in valid YAML format.',
+  group: 'modification_tools',
+  context_definitions: [
+    'component_structure' => new ContextDefinition(
+      data_type: 'string',
+      label: new TranslatableMarkup("Component structure in yml format"),
+      description: new TranslatableMarkup("The component structure to store in YAML format."),
+      required: TRUE,
+    ),
+    'reference_component_nodepath' => new ContextDefinition(
+      data_type: 'string',
+      label: new TranslatableMarkup("The nodePath of the reference component"),
+      description: new TranslatableMarkup("The nodePath of the component after which the generated footer components must be placed."),
+      required: FALSE,
+    ),
+  ],
+)]
+final class SetAIGeneratedTemplateData extends FunctionCallBase implements ExecutableFunctionCallInterface, AiAgentContextInterface {
+
+  /**
+   * The Canvas page builder helper service.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiPageBuilderHelper
+   */
+  protected CanvasAiPageBuilderHelper $pageBuilderHelper;
+
+  /**
+   * The logger factory.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected LoggerChannelFactoryInterface $loggerFactory;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountProxyInterface
+   */
+  protected AccountProxyInterface $currentUser;
+
+  /**
+   * The Canvas AI temp store service.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiTempStore
+   */
+  protected CanvasAiTempStore $tempStore;
+
+  /**
+   * The AI response validator service.
+   *
+   * @var \Drupal\canvas_ai\AiResponseValidator
+   */
+  protected AiResponseValidator $responseValidator;
+
+  /**
+   * Load from dependency injection container.
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): FunctionCallInterface | static {
+    $instance = new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      new ContextDefinitionNormalizer(),
+    );
+    $instance->pageBuilderHelper = $container->get('canvas_ai.page_builder_helper');
+    $instance->loggerFactory = $container->get('logger.factory');
+    $instance->currentUser = $container->get('current_user');
+    $instance->tempStore = $container->get('canvas_ai.tempstore');
+    $instance->responseValidator = $container->get('canvas_ai.response_validator');
+    return $instance;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute(): void {
+    // Make sure that the user has the right permissions.
+    if (!$this->currentUser->hasPermission('use experience builder ai')) {
+      throw new \Exception('The current user does not have the right permissions to run this tool.');
+    }
+    try {
+      // Get reference component uuid.
+      $reference_nodepath = !empty($this->getContextValue('reference_component_nodepath')) ? $this->getContextValue('reference_component_nodepath') : [];
+      // Convert the reference nodepath to an array.
+      if (!is_array($reference_nodepath)) {
+        $reference_nodepath = Json::decode($reference_nodepath);
+      }
+      // If reference nodepath is provided, ensure that it is valid by checking
+      // if there are even number of elements.
+      if (!empty($reference_nodepath) && count($reference_nodepath) % 2 !== 0) {
+        throw new \Exception(sprintf('The reference nodepath %s is incomplete and missing elements. Provide the complete nodepath from current layout.', implode(', ', $reference_nodepath)));
+      }
+      $component_structure = $this->getContextValue('component_structure');
+      // Try to decode the YAML structure.
+      try {
+        $component_structure_array = Yaml::decode($component_structure);
+      }
+      catch (\Exception $e) {
+        throw new \Exception('Invalid YAML format provided.');
+      }
+
+      // Validate if regions are correct.
+      $current_layout = $this->tempStore->getData(CanvasAiTempStore::CURRENT_LAYOUT_KEY) ?? '';
+      $layout_regions = $this->pageBuilderHelper->getRegionIndex($current_layout);
+      foreach (array_keys($component_structure_array) as $region) {
+        if (!array_key_exists($region, $layout_regions)) {
+          $available_regions = implode(', ', array_keys($layout_regions));
+          throw new \Exception(sprintf(
+            'Region "%s" does not exist. Available regions are: %s.',
+            $region,
+            $available_regions
+          ));
+        }
+      }
+
+      // Validate the component structure for each region.
+      foreach ($component_structure_array as $components) {
+        $this->responseValidator->validateComponentStructure($components);
+      }
+      // Process the YAML structure for UI representation.
+      $processed_structure = $this->pageBuilderHelper->processTemplateYmlForUi($component_structure_array, $current_layout, $reference_nodepath);
+      $this->setOutput($processed_structure);
+    }
+    catch (\Exception $e) {
+      $this->loggerFactory->get('canvas_ai')->error($e->getMessage());
+      $this->setOutput(sprintf('Failed to save: %s', $e->getMessage()));
+    }
+  }
+
+}
diff --git a/modules/canvas_ai/tests/src/Kernel/Plugin/AiFunctionCall/SetAIGeneratedTemplateDataTest.php b/modules/canvas_ai/tests/src/Kernel/Plugin/AiFunctionCall/SetAIGeneratedTemplateDataTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..5ae2cb12f7c58c5814628b176f06cd6ee8d03488
--- /dev/null
+++ b/modules/canvas_ai/tests/src/Kernel/Plugin/AiFunctionCall/SetAIGeneratedTemplateDataTest.php
@@ -0,0 +1,296 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\canvas_ai\Kernel\Plugin\AiFunctionCall;
+
+use Drupal\ai\Service\FunctionCalling\ExecutableFunctionCallInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\KernelTests\KernelTestBase;
+use Drupal\Tests\user\Traits\UserCreationTrait;
+use Drupal\user\Entity\User;
+use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
+use Drupal\canvas_ai\CanvasAiTempStore;
+
+/**
+ * Tests for the SetAIGeneratedTemplateData function call plugin.
+ *
+ * @group canvas_ai
+ */
+final class SetAIGeneratedTemplateDataTest extends KernelTestBase {
+
+  use UserCreationTrait;
+
+  /**
+   * The function call plugin manager.
+   *
+   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   */
+  protected $functionCallManager;
+
+  /**
+   * A test user with AI permissions.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected AccountInterface $privilegedUser;
+
+  /**
+   * A test user without AI permissions.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected AccountInterface $unprivilegedUser;
+
+  /**
+   * The Canvas AI temp store service mock.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiTempStore|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $mockTempStore;
+
+  /**
+   * The mock page builder helper.
+   *
+   * @var \Drupal\canvas_ai\CanvasAiPageBuilderHelper
+   */
+  protected $pageBuilderHelper;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'ai',
+    'ai_agents',
+    'experience_builder',
+    'system',
+    'user',
+    'canvas_ai',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+    $this->installEntitySchema('user');
+
+    $this->functionCallManager = $this->container->get('plugin.manager.ai.function_calls');
+    $privileged_user = $this->createUser(['use experience builder ai']);
+    $unprivileged_user = $this->createUser();
+    if (!$privileged_user instanceof User || !$unprivileged_user instanceof User) {
+      throw new \Exception('Failed to create test users');
+    }
+    $this->privilegedUser = $privileged_user;
+    $this->unprivilegedUser = $unprivileged_user;
+
+    $this->mockTempStore = $this->createMock(CanvasAiTempStore::class);
+    $this->container->set('canvas_ai.tempstore', $this->mockTempStore);
+
+    $this->pageBuilderHelper = $this->createPageBuilderMock();
+    $this->container->set('canvas_ai.page_builder_helper', $this->pageBuilderHelper);
+  }
+
+  /**
+   * Creates a mock PageBuilderHelper.
+   */
+  protected function createPageBuilderMock(): CanvasAiPageBuilderHelper {
+    $mock_helper = $this->getMockBuilder(CanvasAiPageBuilderHelper::class)
+      ->disableOriginalConstructor()
+      ->onlyMethods(['getComponentContextForAi'])
+      ->getMock();
+
+    // Mock component context data.
+    $component_context_yaml = <<<YAML
+sdc.xb_test_sdc.card:
+  id: sdc.xb_test_sdc.card
+  name: Card
+  description: Card component
+  group: ''
+  props:
+    title:
+      name: Title
+      description: Card title
+      type: string
+      default: ''
+    content:
+      name: Content
+      description: Card content
+      type: string
+      default: ''
+sdc.xb_test_sdc.text:
+  id: sdc.xb_test_sdc.text
+  name: Text
+  description: Text component
+  group: ''
+  props:
+    text:
+      name: Text
+      description: Text content
+      type: string
+      default: ''
+YAML;
+
+    $mock_helper->expects($this->any())
+      ->method('getComponentContextForAi')
+      ->willReturn($component_context_yaml);
+
+    return $mock_helper;
+  }
+
+  /**
+   * Tests the tool output.
+   */
+  public function testSetTemplateDataTool(): void {
+    $this->container->get('current_user')->setAccount($this->privilegedUser);
+
+    $valid_yaml = <<<YAML
+content:
+  - sdc.xb_test_sdc.card:
+      props:
+        title: 'Test Card'
+        content: 'Test content'
+sidebar:
+  - sdc.xb_test_sdc.text:
+      props:
+        text: 'Sidebar text'
+YAML;
+
+    $mock_layout = [
+      "layout" => [
+        "content" => [
+          "nodePathPrefix" => [0],
+          "components" => [],
+        ],
+        "sidebar" => [
+          "nodePathPrefix" => [1],
+          "components" => [],
+        ],
+      ],
+    ];
+    $layout_json = \json_encode($mock_layout);
+
+    $this->mockTempStore->expects($this->once())
+      ->method('getData')
+      ->with(CanvasAiTempStore::CURRENT_LAYOUT_KEY)
+      ->willReturn($layout_json);
+
+    $expected_output = [
+      'operations' => [
+        [
+          'operation' => 'ADD',
+          'components' => [
+            [
+              'id' => 'sdc.xb_test_sdc.card',
+              'nodePath' => [0, 0],
+              'fieldValues' => [
+                'title' => 'Test Card',
+                'content' => 'Test content',
+              ],
+            ],
+            [
+              'id' => 'sdc.xb_test_sdc.text',
+              'nodePath' => [1, 0],
+              'fieldValues' => [
+                'text' => 'Sidebar text',
+              ],
+            ],
+          ],
+        ],
+      ],
+    ];
+
+    $tool = $this->functionCallManager->createInstance('canvas_ai:set_template_data');
+    $this->assertInstanceOf(ExecutableFunctionCallInterface::class, $tool);
+
+    $tool->setContextValue('component_structure', $valid_yaml);
+    $tool->execute();
+
+    $result = $tool->getReadableOutput();
+    $this->assertEquals(
+      json_encode($expected_output),
+      $result,
+      "The component structure was not processed correctly"
+    );
+  }
+
+  /**
+   * Tests the tool output when reference nodepath is given.
+   */
+  public function testSetTemplateDataToolWithReferenceNodepath(): void {
+    $this->container->get('current_user')->setAccount($this->privilegedUser);
+
+    $valid_yaml = <<<YAML
+content:
+  - sdc.xb_test_sdc.card:
+      props:
+        title: 'Test Card'
+        content: 'Test content'
+  - sdc.xb_test_sdc.text:
+      props:
+        text: 'Sidebar text'
+YAML;
+
+    $mock_layout = [
+      "layout" => [
+        "content" => [
+          "nodePathPrefix" => [0],
+          "components" => [
+            [
+              "name" => "sdc.xb_test_sdc.card",
+              "uuid" => "9cadf75e-7116-444a-9d05-e3c86483d178",
+              "nodePath" => [0, 0],
+            ],
+            [
+              "name" => "sdc.xb_test_sdc.card",
+              "uuid" => "ab9b70d7-554d-421a-8303-725f4f6a6b9c",
+              "nodePath" => [0, 1],
+            ],
+          ],
+        ],
+      ],
+    ];
+
+    $this->mockTempStore->expects($this->once())
+      ->method('getData')
+      ->with(CanvasAiTempStore::CURRENT_LAYOUT_KEY)
+      ->willReturn(\json_encode($mock_layout));
+
+    $expected_output = [
+      'operations' => [
+        [
+          'operation' => 'ADD',
+          'components' => [
+            [
+              'id' => 'sdc.xb_test_sdc.card',
+              'nodePath' => [0, 2],
+              'fieldValues' => [
+                'title' => 'Test Card',
+                'content' => 'Test content',
+              ],
+            ],
+            [
+              'id' => 'sdc.xb_test_sdc.text',
+              'nodePath' => [0, 3],
+              'fieldValues' => [
+                'text' => 'Sidebar text',
+              ],
+            ],
+          ],
+        ],
+      ],
+    ];
+
+    $tool = $this->functionCallManager->createInstance('canvas_ai:set_template_data');
+    $this->assertInstanceOf(ExecutableFunctionCallInterface::class, $tool);
+
+    $tool->setContextValue('component_structure', $valid_yaml);
+    // Set the reference nodepath.
+    $tool->setContextValue('reference_component_nodepath', [0, 1]);
+    $tool->execute();
+
+    $result = $tool->getReadableOutput();
+    $this->assertEquals(\json_encode($expected_output), $result);
+  }
+
+}
diff --git a/ui/src/components/aiExtension/AiWizard.tsx b/ui/src/components/aiExtension/AiWizard.tsx
index 02b8f6700f80705c12941af651301f42f0f54d96..d43dcf69d0f0209f139bd083137da364ae8478f4 100644
--- a/ui/src/components/aiExtension/AiWizard.tsx
+++ b/ui/src/components/aiExtension/AiWizard.tsx
@@ -280,6 +280,11 @@ const AiWizard = () => {
   let isComponentRendered = false;
   const welcomeTextRef = useRef<HTMLSpanElement>(null);

+  // Get the current layout, selected component, and available components from Redux state
+  const theLayoutModel = useAppSelector(
+    (state) => state?.layoutModel?.present as LayoutModelSliceState,
+  );
+
   // Create a ref to store current values for Deep Chat's connect prop.
   // Accessing these ensures we're working with fresh values even after the Deep
   // Chat component has been mounted.
@@ -288,6 +293,7 @@ const AiWizard = () => {
     textPropsMapString,
     pageData,
     params,
+    theLayoutModel,
   });

   // Update the ref whenever tracked values change.
@@ -297,21 +303,13 @@ const AiWizard = () => {
       textPropsMapString,
       pageData,
       params,
+      theLayoutModel,
     };
-  }, [codeComponentName, textPropsMapString, pageData, params]);
+  }, [codeComponentName, textPropsMapString, pageData, params, theLayoutModel]);
   // Access layoutUtils and componentSelectionUtils from drupalSettings.canvas
   const layoutUtils = drupalSettings.canvas?.layoutUtils as any;
   const componentSelectionUtils = drupalSettings.canvas
     ?.componentSelectionUtils as any;
-
-  // Get the current layout, selected component, and available components from Redux state
-  const theLayoutModel = useAppSelector(
-    (state) => state?.layoutModel?.present as LayoutModelSliceState,
-  );
-  const layoutModelRef = useRef(theLayoutModel);
-  useEffect(() => {
-    layoutModelRef.current = theLayoutModel;
-  }, [theLayoutModel]);
   const selectedComponent = useAppSelector(
     (state) => state.ui.selection.items[0],
   );
@@ -326,10 +324,10 @@ const AiWizard = () => {

   // Helper to transform the current layout into a JSON representation.
   const transformLayout = () => {
-    const theLayout = layoutModelRef.current;
+    const theLayout = currentValuesRef.current.theLayoutModel;
     if (!theLayout?.layout) return null;
     const result: any = { layout: {} };
-    theLayout.layout.forEach((region, regionIndex) => {
+    theLayout.layout.forEach((region: any, regionIndex: number) => {
       result.layout[region.id] = {
         nodePathPrefix: [regionIndex],
         components: [],
@@ -351,7 +349,7 @@ const AiWizard = () => {
       let nodePath: number[] | null = null;
       try {
         nodePath = layoutUtils.findNodePathByUuid(
-          theLayoutModel.layout,
+          currentValuesRef.current.theLayoutModel.layout,
           component.uuid,
         );
       } catch (e) {

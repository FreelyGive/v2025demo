diff --git a/modules/canvas_ai/canvas_ai.links.menu.yml b/modules/canvas_ai/canvas_ai.links.menu.yml
index 3f77b376..82f45338 100644
--- a/modules/canvas_ai/canvas_ai.links.menu.yml
+++ b/modules/canvas_ai/canvas_ai.links.menu.yml
@@ -9,3 +9,7 @@ canvas_ai.setting:
   description: 'Set the max image upload size.'
   parent: ai.admin_settings
   route_name: canvas_ai.setting
+canvas_ai.theme_region_settings:
+  title: Canvas AI Theme Region Settings
+  parent: ai.admin_settings
+  route_name: canvas_ai.theme_region_settings
diff --git a/modules/canvas_ai/canvas_ai.routing.yml b/modules/canvas_ai/canvas_ai.routing.yml
index 9a66bb78..38b9a84b 100644
--- a/modules/canvas_ai/canvas_ai.routing.yml
+++ b/modules/canvas_ai/canvas_ai.routing.yml
@@ -14,7 +14,7 @@ canvas_ai.csrf_token:
     _method: 'POST'
 
 canvas_ai.component_description_settings:
-  path: '/admin/config/system/canvas-ai-component-description-settings'
+  path: '/admin/config/ai/canvas-ai-component-description-settings'
   defaults:
     _title: 'Canvas AI Component Description Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiComponentDescriptionSettingsForm'
@@ -26,6 +26,12 @@ canvas_ai.setting:
   defaults:
     _title: 'Canvas AI Settings Form'
     _form: 'Drupal\canvas_ai\Form\CanvasAiSettingsForm'
+
+canvas_ai.theme_region_settings:
+  path: '/admin/config/ai/canvas-ai-theme-region-settings'
+  defaults:
+    _title: 'Canvas AI Theme Region Settings'
+    _form: 'Drupal\canvas_ai\Form\CanvasAIThemeRegionSettingsForm'
   requirements:
     _permission: 'use Drupal Canvas AI'
 
diff --git a/modules/canvas_ai/config/schema/canvas_ai.schema.yml b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
index 28dd2313..db8a120d 100644
--- a/modules/canvas_ai/config/schema/canvas_ai.schema.yml
+++ b/modules/canvas_ai/config/schema/canvas_ai.schema.yml
@@ -37,3 +37,15 @@ component_source_entry:
     data:
       type: text
       label: 'YAML string of components'
+
+canvas_ai.theme_region.settings:
+  type: config_object
+  label: 'Canvas AI Theme Region Settings'
+  mapping:
+    region_descriptions:
+      type: mapping
+      label: 'Region Descriptions'
+      mapping:
+        '*':
+          type: text
+          label: 'Description'
diff --git a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
index 750788f6..aa83d4a3 100644
--- a/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
+++ b/modules/canvas_ai/src/CanvasAiPageBuilderHelper.php
@@ -1185,4 +1185,93 @@ class CanvasAiPageBuilderHelper {
     return !empty($node[$slot_name]);
   }
 
+  /**
+   * Gets the region indices from the current layout.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values.
+   */
+  public function getRegionIndex(string $current_layout): array {
+    $layout_array = Json::decode($current_layout);
+    $regions = [];
+
+    if (isset($layout_array['regions']) && is_array($layout_array['regions'])) {
+      foreach ($layout_array['regions'] as $region_name => $region_data) {
+        if (isset($region_data['nodePathPrefix'])) {
+          $regions[$region_name] = $region_data['nodePathPrefix'][0];
+        }
+      }
+    }
+
+    return $regions;
+  }
+
+  /**
+   * Gets the available regions from the current layout along with their descriptions, if configured.
+   *
+   * @param string $current_layout
+   *   The current layout JSON string.
+   *
+   * @return array
+   *   An array with region names as keys and their nodePathPrefix values and descriptions.
+   */
+  public function getAvailableRegions(string $current_layout) : array {
+    $region_index_mapping = $this->getRegionIndex($current_layout);
+    $region_descriptions = $this->configFactory->get('canvas_ai.theme_region.settings')->get('region_descriptions') ?? [];
+    $available_regions = [];
+    foreach ($region_index_mapping as $region_name => $region_index) {
+      $available_regions[$region_name] = [
+        'nodePathPrefix' => $region_index,
+        'description' => $region_descriptions[$region_name] ?? '',
+      ];
+    }
+    return $available_regions;
+  }
+
+  /**
+   * Processes the parsed YAML array for UI representation.
+   *
+   * This function processes the yml generated by the template generation agent
+   * and converts it into a JSON structure that can be used in the UI.
+   *
+   * @param array $parsed_array
+   *   The parsed YAML array.
+   * @param string $current_layout
+   *   The current layout of the page.
+   * @param array $reference_nodepath
+   *   The nodepath of the reference component, if any.
+   */
+  public function processTemplateYmlForUi(array $parsed_array, string $current_layout, array $reference_nodepath = []): string {
+    $result = [
+      'operations' => [
+        [
+          'operation' => 'ADD',
+          'components' => [],
+        ],
+      ],
+    ];
+    foreach ($parsed_array as $region => $components) {
+      if (!is_array($components)) {
+        continue;
+      }
+
+      // If reference nodepath is given, calculate the nodepath of other components
+      // based on it.
+      if ($reference_nodepath) {
+        $this->processComponentsBelow($components, $reference_nodepath, $result['operations'][0]['components']);
+      }
+      else {
+        $region_index_mapping = $this->getRegionIndex($current_layout);
+
+        $region_index = $region_index_mapping[$region] ?? 0;
+        $this->processComponents($components, [$region_index, 0], $result['operations'][0]['components']);
+      }
+    }
+
+    return Json::encode($result);
+  }
+
 }
diff --git a/modules/canvas_ai/src/Controller/CanvasBuilder.php b/modules/canvas_ai/src/Controller/CanvasBuilder.php
index 3834e0b2..59724fef 100644
--- a/modules/canvas_ai/src/Controller/CanvasBuilder.php
+++ b/modules/canvas_ai/src/Controller/CanvasBuilder.php
@@ -22,9 +22,10 @@ use Drupal\canvas_ai\Plugin\AiFunctionCall\CreateComponent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\EditComponentJs;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\CreateFieldContent;
 use Drupal\canvas_ai\Plugin\AiFunctionCall\EditFieldContent;
-use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedComponentStructure;
 use Drupal\canvas_ai\CanvasAiPageBuilderHelper;
 use Drupal\canvas_ai\CanvasAiTempStore;
+use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedComponentStructure;
+use Drupal\canvas_ai\Plugin\AiFunctionCall\SetAIGeneratedTemplateData;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -222,7 +223,19 @@ final class CanvasBuilder extends ControllerBase {
     $agent->setCreateDirectly(TRUE);
     $menu_fetch_source = $this->getMenuFetchSource();
     $json_api_module_status = $this->moduleHandler()->moduleExists('jsonapi') ? 'enabled' : 'disabled';
-    $agent->setTokenContexts(['entity_type' => $prompt['entity_type'] ?? NULL, 'entity_id' => $prompt['entity_id'] ?? NULL, 'selected_component' => $prompt['selected_component'] ?? NULL, 'layout' => $prompt['layout'] ?? NULL, 'derived_proptypes' => isset($prompt['derived_proptypes']) ? JSON::encode($prompt['derived_proptypes']) : NULL, 'page_title' => $prompt['page_title'] ?? NULL, 'page_description' => $prompt['page_description'] ?? NULL, 'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None', 'menu_fetch_source' => $menu_fetch_source, 'json_api_module_status' => $json_api_module_status]);
+    $agent->setTokenContexts([
+      'entity_type' => $prompt['entity_type'],
+      'entity_id' => $prompt['entity_id'],
+      'selected_component' => $prompt['selected_component'] ?? NULL,
+      'layout' => $prompt['layout'] ?? NULL,
+      'derived_proptypes' => JSON::encode($prompt['derived_proptypes']) ?? NULL,
+      'available_regions' => JSON::encode($this->canvasAiPageBuilderHelper->getAvailableRegions(Json::encode($prompt['current_layout']))) ?? NULL,
+      'page_title' => $prompt['page_title'],
+      'page_description' => $prompt['page_description'] ?? NULL,
+      'active_component_uuid' => $prompt['active_component_uuid'] ?? 'None',
+      'menu_fetch_source' => $menu_fetch_source,
+      'json_api_module_status' => $json_api_module_status,
+    ]);
     try {
       $solvability = $agent->determineSolvability();
     }
@@ -255,6 +268,7 @@ final class CanvasBuilder extends ControllerBase {
         EditFieldContent:: class => ['refined_text'],
         AddMetadata::class => ['metadata'],
         SetAIGeneratedComponentStructure::class => ['operations'],
+        SetAIGeneratedTemplateData::class => ['operations'],
       ];
       if (!empty($tools)) {
         foreach ($tools as $tool) {
@@ -263,19 +277,18 @@ final class CanvasBuilder extends ControllerBase {
               // @todo Refactor this after https://www.drupal.org/i/3529313 is fixed.
               $output = $tool->getReadableOutput();
               try {
-                $data = Yaml::parse($output);
+                if ($tool instanceof SetAIGeneratedComponentStructure || $tool instanceof SetAIGeneratedTemplateData) {
+                  // The tool output is a JSON string for safer decoding.
+                  $data = Json::decode($output);
+                }
+                else {
+                  // The output is a YAML string.
+                  $data = Yaml::parse($output);
+                }
                 foreach ($keys as $key) {
                   if (!empty($data[$key])) {
                     $response[$key] = $data[$key];
                   }
-                  if ($tool instanceof SetAIGeneratedComponentStructure) {
-                    // The tool output is a JSON string for safer decoding.
-                    $data = Json::decode($output);
-                  }
-                  else {
-                    // The output is a YAML string.
-                    $data = Yaml::parse($output);
-                  }
                 }
               }
               catch (\Throwable) {
@@ -286,7 +299,7 @@ final class CanvasBuilder extends ControllerBase {
           if ($tool instanceof AiAgentWrapper) {
             $response['message'] = $tool->getReadableOutput();
           }
-          if ($tool->getPluginId() === 'ai_agents::ai_agent::canvas_page_builder_agent') {
+          if (in_array($tool->getPluginId(), ['ai_agents::ai_agent::canvas_ai_template_builder_agent', 'ai_agents::ai_agent::canvas_ai_page_builder_agent'])) {
             $this->canvasAiTempStore->deleteData(CanvasAiTempStore::CURRENT_LAYOUT_KEY);
           }
         }
diff --git a/modules/canvas_ai/src/Hook/CanvasAiHooks.php b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
index ab0267e2..21ef1ca6 100644
--- a/modules/canvas_ai/src/Hook/CanvasAiHooks.php
+++ b/modules/canvas_ai/src/Hook/CanvasAiHooks.php
@@ -75,6 +75,10 @@ class CanvasAiHooks {
             'name' => $this->t('JSON API Module status'),
             'description' => $this->t('Returns the status of JSON API module.'),
           ],
+          'available_regions' => [
+            'name' => $this->t('Available Regions'),
+            'description' => $this->t('Returns the available regions.'),
+          ],
         ],
       ],
     ];
@@ -129,6 +133,10 @@ class CanvasAiHooks {
           case 'json_api_module_status':
             $replacements[$original] = $data['json_api_module_status'];
             break;
+
+          case 'available_regions':
+            $replacements[$original] = !empty($data['available_regions']) ? $data['available_regions'] : NULL;
+            break;
         }
       }
     }
